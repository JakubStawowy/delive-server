# Localhost database
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
#spring.jpa.properties.hibernate.hbm2ddl.auto=update
##spring.jpa.properties.hibernate.hbm2ddl.auto=create
#spring.jpa.database=mysql
#spring.datasource.url=jdbc:mysql://localhost:3306/delive
#spring.datasource.username=root
#spring.datasource.password=

# Clever cloud database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=none
spring.jpa.properties.hibernate.hbm2ddl.auto=update
spring.jpa.database=postgresql
spring.datasource.url=jdbc:postgresql://bsqgzdr02p7pjg3pr0g7-postgresql.services.clever-cloud.com:5432/bsqgzdr02p7pjg3pr0g7
spring.datasource.username=ul0ymlegz9ekweafz9ss
spring.datasource.password=lBOtYhHsVhi4q8dRVEgYKGf7YlLA1B

# Show SQL
#spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.format_sql=true

# Geocoding layer order number
# In case of first layer geocoding api failure, set geocoding layer to second, and so on
geocoding.layer=first

# Position stack
positionStack.api.key=674d875372303ee0f00d7cf5e87946c1
positionStack.api.uri=http://api.positionstack.com/v1/

# MapQuest
mapquest.api.key=aFNv2te6iS61qABztEDdKAcQjMbv25dO
mapquest.api.uri=http://open.mapquestapi.com/geocoding/v1/
